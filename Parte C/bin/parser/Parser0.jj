PARSER_BEGIN(Parser)

package parser;

import java.util.*;
import AST.*;
import compile.*;

/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;
    Environment evironment = new Environment(null);

    while (true) {
    try {
    exp = parser.Start();
    System.out.println( exp.eval(evironment) );
    CodeBlock block = new CodeBlock();
    exp.compile(block,evironment);
    block.write("Demo.j");
    } catch (Exception e) {
      System.out.println ("Syntax Error!");
      parser.ReInit(System.in);
    }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL : "\n" >
  |
  < DEF : "def">
  |
  < EQUALS : "=">
  |
  < IN : "in" >
  |
  < END : "end">
  |
  < UP: "up" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* > 
}

ASTNode Start():
{ ASTNode t; }
{
   t = Exp() <EL>
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Fact() 
 		 		   { if (op.kind == TIMES) 
                           t1 = new ASTMult(t1,t2);
                     else  t1 = new ASTDiv(t1,t2);
                   } 
				)  *
     { return t1; } 
}


ASTNode Fact() :
{ 	Token n;
	ArrayList<String> ids = new ArrayList<String>();
	ArrayList<ASTNode> nodes = new ArrayList<ASTNode>();
  	ASTNode t, p;
}
{
   ( n=<Num> { t = new ASTNum(Integer.parseInt(n.image)); }
 		| n = <Id> {t = new ASTId(n.image);}
   		| <DEF>
   			(
   			  n = <Id>
   			  {
   			    ids.add(n.image);
   			  }
			  <EQUALS> t = Exp()
			  {
			    nodes.add(t);
			  }
			)+
   			  <IN> p = Exp() <END>
   			  {
				t = new ASTDef(ids, nodes, p);
   			  }
   		| <MINUS> { t= new ASTUminus(Fact()); }
     	| <LPAR> t=Exp() <RPAR>
   )
   { return t; }
}
